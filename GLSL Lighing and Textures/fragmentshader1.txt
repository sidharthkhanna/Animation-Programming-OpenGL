varying vec3 N;
varying vec3 v;    

uniform sampler2D color_texture;

uniform vec4 color1 = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 color2 = vec4(0.3, 0.7, 0.5, 1.0);
 
 out vec4 colorOut  ;


void main (void)  
{  

      vec3 L = normalize(gl_LightSource[0].position.xyz - v); 
      vec3 E = normalize(-v); // we are in Eye Coordinates, so EyePos is (0,0,0) 
      vec3 R = normalize(-reflect(L,N)); 
   
      //calculate Ambient Term: 
      vec4 Iamb = gl_FrontLightProduct[0].ambient; 

      //calculate Diffuse Term: 
      vec4 Idiff = gl_FrontLightProduct[0].diffuse * max(dot(N,L), 0.0);
      Idiff = clamp(Idiff, 0.0, 1.0);

     
   
      // calculate Specular Term:
      vec4 Ispec = gl_FrontLightProduct[0].specular 
             * pow(max(dot(R,E),0.0),0.3*gl_FrontMaterial.shininess);
      Ispec = clamp(Ispec, 0.0, 1.0);
   
      colorOut =  Iamb+Idiff+Ispec+gl_FrontLightModelProduct.sceneColor;


 

   

  
   

   //Ross: If I want to sample my texture, I need to sample it at the (s,t) coordinate of my texture coordinate
    

   //Ross: Generic color output is now making all geometry blue

}    
